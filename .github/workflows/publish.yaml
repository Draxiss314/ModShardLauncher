# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch (test only)
    tags:
      - '*'   # Run the workflow with a tag

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/publish

jobs:
  set_version:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          ref: main

      - name: Set Version
        id: package_version
        uses: KageKirin/set-csproj-version@v0
        with:
          file: ./ModShardLauncher.csproj
          version: ${{ github.ref_name  }}

      - name: Set user info
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Check if there are any changes
        id: verify_diff
        run: |
          git diff --quiet . || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit Files & Pull
        if: steps.verify_diff.outputs.changed == 'true'
        run: |
          git commit -a -m "Updated version with CI."
          git pull origin main --rebase

      - name: Push Changes
        if: steps.verify_diff.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
      
      - name: Get SHA
        id: sha
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo ${{ steps.sha.outputs.sha }}

  create_msl:
    runs-on: ubuntu-latest
    needs: [ set_version ]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
        ref: ${{ needs.set_version.outputs.sha }}

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Build the project in the folder from the environment variable NuGetDirectory
    - run: dotnet publish -r win-x64 -c Release /p:PublishSingleFile=true /p:IncludeAllContentForSelfExtract=true /p:PublishReadyToRun=true --output ${{ env.NuGetDirectory }}

    # Zip the folder
    - name: Zip
      run: zip -r msl.zip ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: msl
        if-no-files-found: error
        retention-days: 7
        path: msl.zip

  create_release:
    runs-on: ubuntu-latest
    needs: [ create_msl ]
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        run: gh release create ${{ github.ref_name }} --generate-notes --prerelease
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
